name: API Tests CI

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      BASE_URL: http://localhost:3000
      EXTERNAL_API_URL: https://fakerestapi.azurewebsites.net/api/v1

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Allure CLI (latest)
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.tgz
          tar -xzf allure-2.27.0.tgz
          sudo mv allure-2.27.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure
          allure --version

      - name: Install Docker Compose plugin
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl gnupg
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          sudo chmod a+r /etc/apt/keyrings/docker.gpg
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin
      
      - name: Start json-server
        run: docker compose up -d


      - name: Clean old Allure results
        run: |
          rm -rf reports/allure-results/*
          rm -rf reports/allure-report/*

      - name: Load previous Allure history (optional)
        uses: actions/download-artifact@v4
        with:
          name: allure-history
          path: reports/allure-results/history
        continue-on-error: true

#      - name: Copy Allure categories.json
#        run: cp config/categories.json reports/allure-results/categories.json

      - name: Wait for json-server
        run: |
          for i in {1..20}; do
            if curl -s http://localhost:3000 > /dev/null; then
              echo "json-server is up!"
              break
            fi
            echo "Waiting for json-server..."
            sleep 2
          done

      - name: Run tests
        run: |
          pytest --alluredir=reports/allure-results

      - name: Load .env variables
        run: |
          export $(grep -v '^#' .env | xargs)
          echo "BASE_URL=$BASE_URL" >> $GITHUB_ENV
          echo "EXTERNAL_API_URL=$EXTERNAL_API_URL" >> $GITHUB_ENV

      - name: Generate environment.properties for Allure
        run: |
          echo "ENVIRONMENT=github-ci" > reports/allure-results/environment.properties
          echo "BASE_URL=${{ env.BASE_URL }}" >> reports/allure-results/environment.properties
          echo "EXTERNAL_API_URL=${{ env.EXTERNAL_API_URL }}" >> reports/allure-results/environment.properties
          echo "PYTHON_VERSION=$(python --version 2>&1)" >> reports/allure-results/environment.properties
          echo "RUNNER_OS=${RUNNER_OS}" >> reports/allure-results/environment.properties      

      - name: Generate Allure report
        run: |
          allure generate reports/allure-results --clean -o reports/allure-report

      - name: Save Allure report as artifact (with index.html)
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: reports/allure-report

      - name: Save Allure history for trend
        uses: actions/upload-artifact@v4
        with:
          name: allure-history
          path: reports/allure-report/history

      - name: Cleanup test books
        run: |
          export PYTHONPATH=.
          python utils/clean_up_test_books.py

      - name: Stop json-server
        if: always()
        run: docker compose down